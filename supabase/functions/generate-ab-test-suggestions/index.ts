import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.55.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const requestStart = Date.now();
    const requestId = crypto.randomUUID().substring(0, 8);
    console.log(`üéØ [${requestId}] AB Test Suggestions Generation started`);

    const anthropicApiKey = Deno.env.get('ANTHROPIC_API_KEY');
    if (!anthropicApiKey) {
      throw new Error('ANTHROPIC_API_KEY is not set');
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    const { 
      pageUrl, 
      goalType, 
      businessContext, 
      currentPain, 
      useVaultKnowledge, 
      uploadedFiles, 
      workspaceId, 
      userId,
      context 
    } = await req.json();

    console.log(`üìã [${requestId}] Request:`, { 
      pageUrl: pageUrl?.substring(0, 50), 
      goalType,
      filesCount: uploadedFiles?.length || 0,
      useVaultKnowledge,
      context
    });

    // Verify workspace access
    const { data: workspaceAccess } = await supabase
      .from('workspace_members')
      .select('role')
      .eq('workspace_id', workspaceId)
      .eq('user_id', userId)
      .single();

    if (!workspaceAccess) {
      throw new Error('Access denied to workspace');
    }

    // Build context from uploaded files if vault knowledge is enabled
    let vaultContext = '';
    if (useVaultKnowledge && uploadedFiles && uploadedFiles.length > 0) {
      console.log(`üìö [${requestId}] Processing ${uploadedFiles.length} vault files`);
      
      vaultContext = 'DONN√âES DU KNOWLEDGE VAULT:\n\n';
      for (const file of uploadedFiles.slice(0, 5)) { // Limit to 5 files for context
        try {
          const { data: fileData } = await supabase.storage
            .from('knowledge-vault')
            .download(file.storage_path);
          
          if (fileData && file.file_type?.includes('text') || file.file_name.endsWith('.csv')) {
            const text = await fileData.text();
            const preview = text.substring(0, 1000);
            vaultContext += `üìÑ ${file.file_name}:\n${preview}${text.length > 1000 ? '...' : ''}\n\n`;
          } else {
            vaultContext += `üìÑ ${file.file_name}: [${file.file_type} - ${Math.round(file.file_size / 1024)}KB]\n\n`;
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è [${requestId}] Could not process file ${file.file_name}:`, error.message);
          vaultContext += `üìÑ ${file.file_name}: [Fichier non accessible]\n\n`;
        }
      }
    }

    // Build comprehensive prompt for Claude
    const prompt = `Tu es un expert en CRO (Conversion Rate Optimization) et AB testing avec 10 ans d'exp√©rience. Tu vas analyser une page web et g√©n√©rer des suggestions de tests AB tr√®s sp√©cifiques et actionnables.

CONTEXTE DE LA PAGE:
- URL: ${pageUrl}
- Type de page: ${context.pageType}
- Industrie: ${context.industry}
- Marque d√©tect√©e: ${context.brand || 'Non d√©tect√©e'}
- Objectif principal: ${goalType}

CONTEXTE BUSINESS:
${businessContext || 'Non sp√©cifi√©'}

PROBL√àME ACTUEL IDENTIFI√â:
${currentPain || 'Non sp√©cifi√©'}

${vaultContext}

MISSION:
G√©n√®re exactement 3 suggestions de tests AB tr√®s sp√©cifiques, avec une expertise approfondie en psychologie comportementale et UX. Chaque suggestion doit √™tre unique, actionnable et bas√©e sur des insights psychologiques av√©r√©s.

FORMAT DE R√âPONSE (JSON strict):
{
  "suggestions": [
    {
      "id": "1",
      "title": "Titre accrocheur du test",
      "problem": "Description pr√©cise du probl√®me identifi√© avec des donn√©es/pourcentages si possible",
      "solution": "Solution d√©taill√©e et sp√©cifique √† impl√©menter",
      "expectedImpact": "+XX-XX%",
      "confidence": 85,
      "difficulty": "Facile|Moyen|Avanc√©",
      "psychologyInsight": "Explication du principe psychologique utilis√©",
      "uniqueness": "Pourquoi cette approche est diff√©rente/innovante",
      "brandContext": "Contexte sp√©cifique √† la marque si applicable",
      "implementation": {
        "platform": "AB Tasty",
        "code": "Code CSS/JS sp√©cifique et pr√™t √† utiliser",
        "setup": ["√âtape 1", "√âtape 2", "√âtape 3", "√âtape 4"]
      },
      "metrics": {
        "primary": "M√©trique principale √† suivre",
        "secondary": ["M√©trique 2", "M√©trique 3", "M√©trique 4"]
      }
    }
  ]
}

CONTRAINTES:
- Suggestions tr√®s sp√©cifiques au contexte (page type, industrie, objectif)
- Code CSS/JS pr√™t √† utiliser avec s√©lecteurs r√©alistes
- Insights psychologiques avanc√©s (pas basiques)
- Impacts chiffr√©s r√©alistes bas√©s sur l'exp√©rience
- Solutions innovantes et diff√©renciantes
- Si marque connue, int√©grer ses sp√©cificit√©s (positionnement, personas)

STYLE:
- Titres percutants et professionnels
- Probl√®mes chiffr√©s quand possible
- Solutions concr√®tes et d√©taill√©es
- Psychologie comportementale avanc√©e
- Code production-ready`;

    console.log(`üß† [${requestId}] Calling Claude for AB test suggestions`);

    // Call Claude API
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': anthropicApiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 4000,
        messages: [{
          role: 'user',
          content: prompt
        }]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå [${requestId}] Claude API error:`, response.status, errorText);
      throw new Error(`Claude API error: ${response.status}`);
    }

    const aiResponse = await response.json();
    console.log(`‚úÖ [${requestId}] Claude response received: ${Date.now() - requestStart}ms`);

    // Parse Claude's response
    let suggestions;
    try {
      const content = aiResponse.content[0].text;
      console.log(`üìù [${requestId}] Raw Claude response length:`, content.length);
      
      // Extract JSON from response (in case Claude adds explanation)
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        suggestions = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No valid JSON found in Claude response');
      }
    } catch (parseError) {
      console.error(`‚ùå [${requestId}] Failed to parse Claude response:`, parseError);
      // Return fallback suggestions
      suggestions = generateFallbackSuggestions(context, goalType);
    }

    // Log interaction for analytics
    try {
      await supabase
        .from('knowledge_vault_audit')
        .insert({
          workspace_id: workspaceId,
          user_id: userId,
          action: 'ab_test_generation',
          resource_type: 'ab_test_suggestions',
          action_metadata: {
            request_id: requestId,
            page_url: pageUrl,
            goal_type: goalType,
            context: context,
            suggestions_count: suggestions?.suggestions?.length || 0
          }
        });
    } catch (logError) {
      console.warn(`‚ö†Ô∏è [${requestId}] Failed to log interaction:`, logError);
    }

    console.log(`üéØ [${requestId}] AB test suggestions generated successfully: ${Date.now() - requestStart}ms`);

    return new Response(JSON.stringify(suggestions), {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'application/json',
        'X-Request-ID': requestId
      },
    });

  } catch (error: any) {
    console.error(`üö® [${crypto.randomUUID().substring(0, 8)}] Function error:`, error);
    
    return new Response(JSON.stringify({ 
      error: error.message || 'Internal error generating AB test suggestions',
      fallback: true
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// Fallback suggestions generator
function generateFallbackSuggestions(context: any, goalType: string) {
  const baseSuggestions = [
    {
      id: "1",
      title: "Optimisation psychologique du CTA principal",
      problem: "Le bouton d'action principal manque d'urgence et de clart√© sur la valeur propos√©e, cr√©ant une h√©sitation chez 73% des visiteurs.",
      solution: "Impl√©menter un design avec contraste √©lev√©, texte orient√© b√©n√©fice, et √©l√©ments d'urgence visuelle pour maximiser l'attention et r√©duire la friction cognitive.",
      expectedImpact: "+25-35%",
      confidence: 85,
      difficulty: "Moyen",
      psychologyInsight: "L'urgence temporelle et la clart√© des b√©n√©fices r√©duisent l'anxi√©t√© d√©cisionnelle et activent le syst√®me 1 (d√©cision rapide) plut√¥t que le syst√®me 2 (r√©flexion).",
      uniqueness: "Combine psychologie comportementale et design persuasif pour cr√©er un effet de conversion compos√© plut√¥t qu'une simple optimisation esth√©tique.",
      implementation: {
        platform: "AB Tasty",
        code: `
.cta-button {
  background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%) !important;
  color: white !important;
  font-size: 18px !important;
  padding: 16px 32px !important;
  border-radius: 8px !important;
  font-weight: 700 !important;
  border: none !important;
  box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3) !important;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
  position: relative !important;
}
.cta-button:hover {
  transform: translateY(-2px) !important;
  box-shadow: 0 6px 20px rgba(255, 107, 53, 0.4) !important;
}
.cta-button:before {
  content: "‚ö° " !important;
}`,
        setup: [
          "Identifier le s√©lecteur CSS exact du bouton principal dans la page",
          "Cr√©er une nouvelle variation dans AB Tasty avec ce CSS",
          "Configurer le tracking des clics sur le bouton",
          "D√©finir la r√©partition de trafic 50/50 et lancer le test"
        ]
      },
      metrics: {
        primary: "Taux de clic sur le CTA principal",
        secondary: ["Temps d'h√©sitation avant clic", "Taux de conversion global", "Engagement post-clic"]
      }
    }
  ];

  return { suggestions: baseSuggestions };
}